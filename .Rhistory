x <- rnorm(100)
hist(x, freq=F)
x <- rnorm(100)
hist(x, freq=F)
h <- hist(x, plot=F)
ylim <- range(0, h$density, dnorm(0))
hist(x, freq=F, ylim=ylim)
curve(dnorm(x), add=T)
hist.with.normal <- function(x, xlab=deparse(substitute(x)),...)
{ h <- hist(x, plot=F, ...)
s <- sd(x) + m <- mean(x)
ylim <- range(0,h$density,dnorm(0,sd=s))
hist(x, freq=F, ylim=ylim, xlab=xlab, ...)
curve(dnorm(x,m,s), add=T)  }
hist.with.normal <- function(x, xlab=deparse(substitute(x)),...)
{ h <- hist(x, plot=F, ...)
s <- sd(x) + m <- mean(x)
ylim <- range(0,h$density,dnorm(0,sd=s))
hist(x, freq=F, ylim=ylim, xlab=xlab, ...)
curve(dnorm(x,m,s), add=T)  }
hist.with.normal(rnorm(200))
hist.with.normal <- function(x, xlab=deparse(substitute(x)),...)
{ h <- hist(x, plot=F, ...)
s <- sd(x)
m <- mean(x)
ylim <- range(0,h$density,dnorm(0,sd=s))
hist(x, freq=F, ylim=ylim, xlab=xlab, ...)
curve(dnorm(x,m,s), add=T)  }
hist.with.normal(rnorm(200))
x <- y/2
y <- 12345
x <- y/2
while (abs(x*x-y) > 1e-10) x <- (x + y/x)/2
x
y <- 12345
x <- y/2
while (abs(x*x-y) > 1e-10) x <- (x + y/x)/2
x
x^2
repeat{
x <- (x + y/x)/2
if (abs(x*x-y) < 1e-10) break
}
x <- y/2
repeat{
x <- (x + y/x)/2
if (abs(x*x-y) < 1e-10) break
}
x
y <- 12345
x <- y/2
x
x <- (x + y/x)/2
x
1e-10
x <- y/2
repeat{
x <- (x + y/x)/2
if (abs(x*x-y) < 1e-10) break
}
x
x <- seq(0, 1,.05)
x
if (all(abs(x*x - y) < 1e-10)) break
x
if (all(abs(x*x - y) < 1e-10)) break
x
plot(x, x, ylab="y", type="l")
for ( j in 2:8 ) lines(x, x^j)
t.test(bmi, mu=22.5)$p.value
weight <- c(60, 72, 57, 90, 95, 72)
weight
height <- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
bmi <- weight/height^2
bmi
t.test(bmi, mu=22.5)$p.value
print
sample(1:40,5)
sample(c("H","T"), 10, replace=T)
sample(c("succ", "fail"), 10, replace=T, prob=c(0.9, 0.1))
1/prod(40:36)
prod(5:1)/prod(40:36)
1/choose(40,5)
x <- seq(-4,4,0.1)
plot(x,dnorm(x),type="l")
curve(dnorm(x), from=-4, to=4)
x <- 0:50
plot(x,dbinom(x,size=50,prob=.33),type="h")
plot(x,dbinom(x,size=50,prob=.03),type="h")
plot(x,dbinom(x,size=50,prob=.73),type="h")
plot(x,dbinom(x,size=50,prob=.33),type="h")
plot(x,dbinom(x,size=40,prob=.33),type="h")
plot(x,dbinom(x,size=30,prob=.33),type="h")
plot(x,dbinom(x,size=20,prob=.33),type="h")
plot(x,dbinom(x,size=5,prob=.33),type="h")
plot(x,dbinom(x,size=50,prob=.33),type="h")
1-pnorm(160,mean=132,sd=13)
1-pnorm(130,mean=132,sd=13)
1-pnorm(160,mean=132,sd=13)
1-pnorm(145,mean=132,sd=13)
1-pnorm(150,mean=132,sd=13)
1-pnorm(155,mean=132,sd=13)
1-pnorm(157,mean=132,sd=13)
pbinom(16,size=20,prob=.5)
1-pbinom(15,size=20,prob=.5)
1-pbinom(15,20,.5)+pbinom(4,20,.5)
sigma <- 12
xbar <- 83
n <- 5
sem <- sigma/sqrt(n)
sem
xbar + sem * qnorm(0.025)
xbar + sem * qnorm(0.975)
qnorm(0.025)
qnorm(0.975)
x <- rnorm(50)
mean(x)
sd(x)
var(x)
median(x)
var(x)
quantile(x)
pvec <- seq(0,1,0.1)
pvec
quantile(x,pvec)
library(ISwR)
attach(juul)
mean(igf1)
mean(igf1;na.rm=T)
mean(igf1,na.rm=T)
sum(!is.na(igf1))
summary(igf1)
!is.na(igf1)
summary(juul)
juul$sex <- factor(juul$sex,labels=c("M","F"))
juul$menarche <- factor(juul$menarche,labels=c("No","Yes"))
juul$tanner <- factor(juul$tanner,
labels=c("I","II","III","IV","V"))
attach(juul)
summary(juul)
hist(x)
mid.age <- c(2.5,7.5,13,16.5,17.5,19,22.5,44.5,70.5)
acc.count <- c(28,46,58,20,31,64,149,316,103)
age.acc <- rep(mid.age,acc.count)
brk <- c(0,5,10,16,17,18,20,25,60,80)
mid.age <- c(2.5,7.5,13,16.5,17.5,19,22.5,44.5,70.5)
acc.count <- c(28,46,58,20,31,64,149,316,103)
age.acc <- rep(mid.age,acc.count)
brk <- c(0,5,10,16,17,18,20,25,60,80)
hist(age.acc,breaks=brk)
age.acc
library(ISwR)
attach(energy)
expend.lean <- expend[stature=="lean"]
expend.obese <- expend[stature=="obese"]
see(energy)
view(energy)
veiw(energy)
View(energy)
par(mfrow=c(2,1))
hist(expend.lean,breaks=10,xlim=c(5,13),ylim=c(0,4),col="white")
hist(expend.obese,breaks=10,xlim=c(5,13),ylim=c(0,4),col="grey")
par(mfrow=c(1,1))
boxplot(expend ~ stature)
boxplot(expend.lean,expend.obese)
opar <- par(mfrow=c(2,2), mex=0.8, mar=c(3,3,2,1)+.1)
stripchart(expend ~ stature)
stripchart(expend ~ stature, method="stack")
stripchart(expend ~ stature, method="jitter")
stripchart(expend ~ stature, method="jitter", jitter=.03)
par(opar)
caff.marital <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67)
nrow=3,byrow=T)
caff.marital <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow=3,byrow=T)
caff.marital
colnames(caff.marital) <- c("0","1-150","151-300",">300")
rownames(caff.marital) <- c("Married","Prev.married","Single")
caff.marital
names(dimnames(caff.marital)) <- c("marital","consumption")
as.data.frame(as.table(caff.marital))
table(sex)
attach(juul)
table(sex)
juul <- transform(juul,
sex=factor(sex,labels=c("M","F")),
menarche=factor(menarche,labels=c("No","Yes")),
tanner=factor(tanner,labels=c("I","II","III","IV","V")))
table(sex)
attach(juul)
table(sex)
table(sex,menarche)
table(menarche,tanner)
xtabs(~ tanner + sex, data=juul)
xtabs(~ dgn + diab + coma, data=stroke)
ftable(coma + diab ~ dgn, data=stroke)
t(caff.marital)t(caff.marital)
t(caff.marital)
tanner.sex <- table(tanner,sex)
margin.table(tanner.sex,1)
margin.table(tanner.sex,2)
prop.table(tanner.sex,1)
tanner.sex/sum(tanner.sex)
total.caff <- margin.table(caff.marital,2)
total.caff
barplot(total.caff, col="white")
barplot(total.caff)
barplot(total.caff, col="white")
par(mfrow=c(2,2))
barplot(t(caff.marital), col="white")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
barplot(caff.marital, col="white")
barplot(t(caff.marital), col="white")
barplot(t(caff.marital), col="white", beside=T)
barplot(prop.table(t(caff.marital),2), col="white", beside=T)
par(mfrow=c(1,1))
barplot(prop.table(t(caff.marital),2),beside=T,
legend.text=colnames(caff.marital),
col=c("white","grey80","grey50","black"))
dotchart(t(caff.marital), lcolor="black")
slices <- c("white","grey80","grey50","black")
pie(caff.marital["Married",], main="Married", col=slices)
opar <- par(mfrow=c(2,2),mex=0.8, mar=c(1,1,2,1))
slices <- c("white","grey80","grey50","black")
pie(caff.marital["Married",], main="Married", col=slices)
pie(caff.marital["Prev.married",], main="Previously married", col=slices)
pie(caff.marital["Single",], main="Single", col=slices)
par(opar)
daily.intake <- c(5260,5470,5640,6180,6390,6515,6805,7515,7515,8230,8770)
mean(daily.intake)
sd(daily.intake)
quantile(daily.intake)
t.test(daily.intake,mu=7725)
mean(daily.intake)
6753.636-0.975*19
6753.636-0.975*19*100
6753.636-0.975*1.9*100
6753.636-0.975*1.9
6753.636-0.975*2.8
6753.636-0.975*2.8*100
t.test(daily.intake,mu=7725)
sd(daily.intake)
sigma <- 1142.123
xbar <- 6753.636
sigma <- 1142.123
n <- 10
sem <- sigma/sqrt(n)
sem
xbar + sem * qnorm(0.025)
xbar + sem * qnorm(0.975)
qnorm(0.025)
xbar + sem * 2.8208
muu<-7725
tt<-(xbar-muu)/sem
xbar + sem * tt*0.025
tt
t.test(daily.intake,mu=7725)
xbar + sem * -2.8208*0.025
xbar - sem * -2.8208*0.025
xbar - sem * 2.8208*0.025
xbar - sem * 2.8208
xbar + sem * 2.8208
sem <- sigma/sqrt(n)
sem
tt<-(xbar-muu)/sem
tt
n <- 11
muu<-7725
sem <- sigma/sqrt(n)
sem
tt<-(xbar-muu)/sem
tt
xbar + sem * qnorm(0.975)
xbar - sem * qnorm(0.975)
xbar + sem * qnorm(0.975)
xbar - sem * tt(0.975)
xbar - sem * tt*0.975
xbar -  (tt*0.975)*sem
100*0.975
qnorm(0.975)
xbar -  (tt*0.975)*sem
xbar - (tt*0.975)*sem
xbar - (-tt*0.975)*sem
t.test(daily.intake,mu=7725)
xbar + sem * qnorm(0.975)
xbar <- 6753.636
sigma <- 1142.123
n <- 11
muu<-7725
sem <- sigma/sqrt(n)
sem
tt<-(xbar-muu)/sem
tt
xbar -sem
xbar -sem*0.975
xbar - sem*0.975
xbar + sem * qnorm(0.975)
xbar + sem * qnorm(0.95)
xbar + sem * tt*0.95
t.test(daily.intake,mu=7725)
tt
-2.8208*0.975
-2.8208*0.975*100
-2.8208*0.975
-2.8208*0.975*sem
xbar-(-2.8208*0.975*sem)
xbar+(-2.8208*0.975*sem)
100*0.975
xbar+(-2.8208*0.975*sem)
xbar+(-2.8208*0.025*sem)
xbar <- 6753.636
sigma <- 1142.123
n <- 11
muu<-7725
sem <- sigma/sqrt(n)
sem
tt<-(xbar-muu)/sem
tt
t.test(daily.intake,mu=7725)
xbar + sem * qnorm(0.025)
xbar + sem * qnorm(0.975)
xbar + sem * qnorm()
qnorm()
xbar + sem * qnorm
qnorm(0.975)
xbar + sem * qnorm(0.025)
qnorm(0.025)
xbar + sem * qnorm(10)
qnorm(10)
xbar - sem * qnorm(0.975)
xbar + sem * qnorm(0.975)
wilcox.test(daily.intake, mu=7725)
attach(energy)
energy
t.test(expend~stature)
t.test(expend~stature, var.equal=T)
var.test(expend~stature)
wilcox.test(expend~stature)
attach(intake)
intake
post - pre [1]
post - pre
plot(intake)
t.test(pre, post, paired=T) Paired
t.test(pre, post, paired=T)
wilcox.test(pre, post, paired=T)
TeaTasting <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
View(TeaTasting)
TeaTasting <-
matrix(c(4, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
View(TeaTasting)
Convictions <-
matrix(c(2, 10, 15, 3),
nrow = 2,
dimnames =
list(c("Dizygotic", "Monozygotic"),
c("Convicted", "Not convicted")))
TeaTasting <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
Convictions
TeaTasting
fisher.test(Convictions, alternative = "less")
fisher.test(Convictions, conf.int = FALSE)
fisher.test(Convictions, conf.level = 0.95)$conf.int
fisher.test(Convictions, conf.level = 0.99)$conf.int
cancer<-
matrixÅž(c(5,13,3,8,14,3),
nrow= 2,
dimnames= list(c("CC","CT","TT"),
c("ill","control")))
cancer<-
matrix(c(5,13,3,8,14,3),
nrow= 2,
dimnames= list(c("CC","CT","TT"),
c("ill","control")))
cancer<-
matrix(c(5,13,3,8,14,3),
dimnames= list(c("CC","CT","TT"),
c("ill","control")))
cancer<-
matrix(c(5,13,3,8,14,3),
dimnames= list(c("CC","CT","TT"),
c("ill","control")))
cancer<-
matrix(c(5,13,3,8,14,3),
nrow = 3,
dimnames= list(c("CC","CT","TT"),
c("ill","control")))
cancer
fisher.test(cancer, alternative = "greater")
fisher.test(Convictions, alternative = "less")
fisher.test(TeaTasting, alternative = "greater")
cancer
fisher.test(cancer, alternative = "greater")
Convictions
cancer<-
matrix(c(5,13,3,8,14,3),
nrow = 3,
dimnames=
list(c("CC","CT","TT"),
c("ill","control")))
fisher.test(cancer, alternative = "greater")
cancer<-
matrix(c(5,13,8,14),
nrow = 3,
dimnames=
list(c("CC","CT"),
c("ill","control")))
cancer<-
matrix(c(5,13,8,14),
nrow = 2,
dimnames=
list(c("CC","CT"),
c("ill","control")))
fisher.test(cancer, alternative = "greater")
Job <- matrix(c(1,2,1,0, 3,3,6,1, 10,10,14,9, 6,7,12,11), 4, 4,
dimnames = list(income = c("< 15k", "15-25k", "25-40k", "> 40k"),
satisfaction = c("VeryD", "LittleD", "ModerateS", "VeryS")))
fisher.test(Job)
fisher.test(Job, simulate.p.value = TRUE, B = 1e5)
cancer<-
matrix(c(5,13,3,8,14,3),
nrow = 3,
dimnames=
list(c("CC","CT","TT"),
c("ill","control")))
fisher.test(cancer, alternative = "greater")
chisq.test(cancer)
citation()
citation(MVN)
library(MVN)
library(lme4)
citation(lme4)
library(lmerTest)
citation(lmerTest)
set.seed(1410) # Make the sample reproducible
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
library(ggplot2)
set.seed(1410) # Make the sample reproducible
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = diamonds)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = diamonds)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=dsmall)
qplot(carat, price, data=diamonds)
library(ggplot2)
set.seed(1410) # Make the sample reproducible
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data=diamonds)
dev.off()
library(ggplot2)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data=diamonds)
qplot(log(carat), log(price), data=diamonds)
qplot(carat, x * y * z, data = diamonds)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, shape = cut)
install.packages("StereoMorph")
library(StereoMorph)
install.packages("StereoMorph")
library(StereoMorph)
install.packages("StereoMorph")
library(StereoMorph)
install.packages("StereoMorph")
library(StereoMorph)
library("devtools")
install_github('OpenBioMaps/obm.r')
install.packages("devtools")
install_github('OpenBioMaps/obm.r')
library("devtools")
install_github('OpenBioMaps/obm.r')
library(obm)
obm_init('butterfly_transects_hu')
obm_auth(paranoid = T)
obm_get("get_data","*")
obm_get("get_data","*",table = "obs_data")
t<-obm_get("get_data","*",table = "obs_data")
View(t)
install.packages("R")
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
library(ggplot2)
set.seed(1410) # Make the sample reproducible
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data=diamonds)
qplot(log(carat), log(price), data=diamonds)
qplot(carat, x * y * z, data = diamonds)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, shape = cut)
install.packages("httpuv")
install.packages("shiny", dependencies = T)
library(shiny)
setwd(d:/Rscripts/R shiny/)
setwd("d:/Rscripts/R shiny/")
runApp()
View(t)
runApp()
library(shiny)
runApp("./",7901)
